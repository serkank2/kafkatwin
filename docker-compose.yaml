version: '3.8'

services:
  # Kafka Cluster 1
  zookeeper-1:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper-1
    container_name: kafkatwin-zookeeper-1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafkatwin-net
    volumes:
      - zk1-data:/var/lib/zookeeper/data
      - zk1-log:/var/lib/zookeeper/log

  kafka-1:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka-1
    container_name: kafkatwin-kafka-1
    depends_on:
      - zookeeper-1
    ports:
      - "19092:19092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper-1:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:9092,PLAINTEXT_HOST://localhost:19092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - kafkatwin-net
    volumes:
      - kafka1-data:/var/lib/kafka/data

  # Kafka Cluster 2
  zookeeper-2:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper-2
    container_name: kafkatwin-zookeeper-2
    ports:
      - "2182:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafkatwin-net
    volumes:
      - zk2-data:/var/lib/zookeeper/data
      - zk2-log:/var/lib/zookeeper/log

  kafka-2:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka-2
    container_name: kafkatwin-kafka-2
    depends_on:
      - zookeeper-2
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper-2:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - kafkatwin-net
    volumes:
      - kafka2-data:/var/lib/kafka/data

  # Schema Registry (Optional)
  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    hostname: schema-registry
    container_name: kafkatwin-schema-registry
    depends_on:
      - kafka-1
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka-1:9092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - kafkatwin-net

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    hostname: prometheus
    container_name: kafkatwin-prometheus
    ports:
      - "9091:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    volumes:
      - ./deployments/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - kafkatwin-net

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    hostname: grafana
    container_name: kafkatwin-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - kafkatwin-net
    depends_on:
      - prometheus

  # KafkaTwin Proxy
  kafkatwin:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        VERSION: "2.0.0"
        BUILD_TIME: "${BUILD_TIME:-$(date -u +%Y-%m-%dT%H:%M:%SZ)}"
    hostname: kafkatwin
    container_name: kafkatwin-proxy
    depends_on:
      - kafka-1
      - kafka-2
      - schema-registry
    ports:
      - "9092:9092"   # Kafka proxy port
      - "8080:8080"   # Health check port
      - "8090:8090"   # Admin API & Web UI
      - "9090:9090"   # Prometheus metrics
    environment:
      - LOG_LEVEL=INFO
    volumes:
      - ./config.yaml:/app/config.yaml:ro
      - kafkatwin-logs:/var/log/kafkatwin
      - kafkatwin-data:/app/data
    networks:
      - kafkatwin-net
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

networks:
  kafkatwin-net:
    driver: bridge

volumes:
  zk1-data:
  zk1-log:
  zk2-data:
  zk2-log:
  kafka1-data:
  kafka2-data:
  prometheus-data:
  grafana-data:
  kafkatwin-logs:
  kafkatwin-data:
